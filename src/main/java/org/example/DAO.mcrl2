contract DAO {
 sort mapping ;
   cons empty : mapping ;
   add : Address#uint#mapping -> mapping;
   map
   retValue : Address#mapping -> uint ;
   search : Address#mapping -> Bool ;
   update: Address#uint#mapping -> mapping ;
   var
   array : mapping ;
   b, d : uint ;
   a, c : Address;
   eqn
   retValue(a, empty) = -1 ;
   retValue(a, add(c, b, array)) = if(a == c, b, retValue(a, array)) ;
   search(a, empty) = false;
   search(a, add(c, b, array)) = if(a == c, true, search(a, array));
   update(a, b, empty) = empty;
   update(a, b, add(c, d, array)) = if(a == c, add(a, b, array),add(c, d, update(a, b, array)));
 sort Address;
   cons Normal, Attacker, Owner, null, Contract : Address ;
   map equal : Address#Address -> Bool;
   var ad1,ad2: Address;
   eqn
   equal(Normal, Normal) = true ;
   equal(Normal, Attacker) = false ;
   equal(Normal, Owner) = false ;
   equal(Normal, null) = false;
   equal(Normal, Contract) = false;
   equal(Attacker, Attacker) = true ;
   equal(Attacker, Normal) = false ;
   equal(Attacker, Owner) = false ;
   equal(Attacker, null) = false;
   equal(Attacker, Contract) = false ;
   equal(Owner, Owner) = true;
   equal(Owner, Normal) = false;
   equal(Owner, Attacker) = false ;
   equal(Owner, null) = false;
   equal(Owner, Contract) = false;
   equal(null, null) = true;
   equal(null, Normal) = false;
   equal(null, Attacker) = false;
   equal(null, Owner) = false;
   equal(null, Contract) = false;
   equal(Contract, Contract) = true;
   equal(Contract, Normal) = false ;
   equal(Contract, Attacker) = false ;
   equal(Contract, Owner) = false ;
   equal(Contract, null) = false;
   ad1 == ad2 = equal(ad1,ad2);
 addToBalance(balance:Int, userBalances:mapping, value:Int, addr:Address) =
;
 }
 withdrawBalance(balance:Int, userBalances:mapping, addr:Address, amount:uint) =
(temp) ->
(withdrawBalance_firstSuccess.())
<> withdrawBalance_firstFail.EXAMPLE_FUNCTION_CALL!!!;
 <EOF>