contract LedgerChannel {
 sort VirtualChannel;
cons empVirtualChannel : VirtualChannel;
addVirtualChannel : Bool#Bool#Int#Address#Int#Address#Address#Address#Int#Int#Int#Int#Int#Int -> VirtualChannel;
map
getIsClose : VirtualChannel-> Bool;
getIsInSettlementState : VirtualChannel-> Bool;
getSequence : VirtualChannel-> Int;
getChallenger : VirtualChannel-> Address;
getUpdateVCtimeout : VirtualChannel-> Int;
getPartyA : VirtualChannel-> Address;
getPartyB : VirtualChannel-> Address;
getPartyI : VirtualChannel-> Address;
getEthBalances : VirtualChannel-> Int#Int;
getErc20Balances : VirtualChannel-> Int#Int;
getBond : VirtualChannel-> Int#Int;
var
isClose : Bool;
isInSettlementState : Bool;
sequence : Int;
challenger : Address;
updateVCtimeout : Int;
partyA : Address;
partyB : Address;
partyI : Address;
ethBalances : Int#Int;
erc20Balances : Int#Int;
bond : Int#Int;
eqn
getIsClose (empVirtualChannel) = false;
getIsClose (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = isClose;
getIsInSettlementState (empVirtualChannel) = false;
getIsInSettlementState (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = isInSettlementState;
getSequence (empVirtualChannel) = -2;
getSequence (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = sequence;
getChallenger (empVirtualChannel) = null;
getChallenger (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = challenger;
getUpdateVCtimeout (empVirtualChannel) = -2;
getUpdateVCtimeout (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = updateVCtimeout;
getPartyA (empVirtualChannel) = null;
getPartyA (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = partyA;
getPartyB (empVirtualChannel) = null;
getPartyB (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = partyB;
getPartyI (empVirtualChannel) = null;
getPartyI (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = partyI;
getEthBalances (empVirtualChannel) = null;
getEthBalances (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = ethBalances;
getErc20Balances (empVirtualChannel) = null;
getErc20Balances (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = erc20Balances;
getBond (empVirtualChannel) = null;
getBond (addVirtualChannel(isClose, isInSettlementState, sequence, challenger, updateVCtimeout, partyA, partyB, partyI, ethBalances, erc20Balances, bond)) = bond;
 sort Channel;
cons empChannel : Channel;
addChannel : Address#Address#Int#Int#Int#Int#Int#Int#Int#Int#Int#Int#Int#Int#bytes32#Int#Int#Bool#Bool#Int -> Channel;
map
getPartyAddresses : Channel-> Address#Address;
getEthBalances : Channel-> Int#Int#Int#Int;
getErc20Balances : Channel-> Int#Int#Int#Int;
getInitialDeposit : Channel-> Int#Int;
getSequence : Channel-> Int;
getConfirmTime : Channel-> Int;
getVCrootHash : Channel-> bytes32;
getLCopenTimeout : Channel-> Int;
getUpdateLCtimeout : Channel-> Int;
getIsOpen : Channel-> Bool;
getIsUpdateLCSettling : Channel-> Bool;
getNumOpenVC : Channel-> Int;
var
partyAddresses : Address#Address;
ethBalances : Int#Int#Int#Int;
erc20Balances : Int#Int#Int#Int;
initialDeposit : Int#Int;
sequence : Int;
confirmTime : Int;
VCrootHash : bytes32;
LCopenTimeout : Int;
updateLCtimeout : Int;
isOpen : Bool;
isUpdateLCSettling : Bool;
numOpenVC : Int;
eqn
getPartyAddresses (empChannel) = null;
getPartyAddresses (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = partyAddresses;
getEthBalances (empChannel) = null;
getEthBalances (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = ethBalances;
getErc20Balances (empChannel) = null;
getErc20Balances (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = erc20Balances;
getInitialDeposit (empChannel) = null;
getInitialDeposit (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = initialDeposit;
getSequence (empChannel) = -2;
getSequence (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = sequence;
getConfirmTime (empChannel) = -2;
getConfirmTime (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = confirmTime;
getVCrootHash (empChannel) = null;
getVCrootHash (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = VCrootHash;
getLCopenTimeout (empChannel) = -2;
getLCopenTimeout (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = LCopenTimeout;
getUpdateLCtimeout (empChannel) = -2;
getUpdateLCtimeout (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = updateLCtimeout;
getIsOpen (empChannel) = false;
getIsOpen (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = isOpen;
getIsUpdateLCSettling (empChannel) = false;
getIsUpdateLCSettling (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = isUpdateLCSettling;
getNumOpenVC (empChannel) = -2;
getNumOpenVC (addChannel(partyAddresses, ethBalances, erc20Balances, initialDeposit, sequence, confirmTime, VCrootHash, LCopenTimeout, updateLCtimeout, isOpen, isUpdateLCSettling, numOpenVC)) = numOpenVC;
 sort mapping ;
cons empty : mapping ;
add : bytes32#Channel#mapping -> mapping;
map
retValue : bytes32#mapping -> Channel ;
search : bytes32#mapping -> Bool ;
update: bytes32#Channel#mapping -> mapping ;
var
array : mapping ;
b, d : Channel ;
a, c : bytes32;
eqn
retValue(a, empty) = -1 ;
retValue(a, add(c, b, array)) = if(a == c, b, retValue(a, array)) ;
search(a, empty) = false;
search(a, add(c, b, array)) = if(a == c, true, search(a, array));
update(a, b, empty) = empty;
update(a, b, add(c, d, array)) = if(a == c, add(a, b, array),add(c, d, update(a, b, array)));
 sort mapping ;
cons empty : mapping ;
add : bytes32#VirtualChannel#mapping -> mapping;
map
retValue : bytes32#mapping -> VirtualChannel ;
search : bytes32#mapping -> Bool ;
update: bytes32#VirtualChannel#mapping -> mapping ;
var
array : mapping ;
b, d : VirtualChannel ;
a, c : bytes32;
eqn
retValue(a, empty) = -1 ;
retValue(a, add(c, b, array)) = if(a == c, b, retValue(a, array)) ;
search(a, empty) = false;
search(a, add(c, b, array)) = if(a == c, true, search(a, array));
update(a, b, empty) = empty;
update(a, b, add(c, d, array)) = if(a == c, add(a, b, array),add(c, d, update(a, b, array)));
 sort Address;
cons Normal, Attacker, Owner, null, Contract : Address ;
map equal : Address#Address -> Bool;
var ad1,ad2: Address;
eqn
equal(Normal, Normal) = true ;
equal(Normal, Attacker) = false ;
equal(Normal, Owner) = false ;
equal(Normal, null) = false;
equal(Normal, Contract) = false;
equal(Attacker, Attacker) = true ;
equal(Attacker, Normal) = false ;
equal(Attacker, Owner) = false ;
equal(Attacker, null) = false;
equal(Attacker, Contract) = false ;
equal(Owner, Owner) = true;
equal(Owner, Normal) = false;
equal(Owner, Attacker) = false ;
equal(Owner, null) = false;
equal(Owner, Contract) = false;
equal(null, null) = true;
equal(null, Normal) = false;
equal(null, Attacker) = false;
equal(null, Owner) = false;
equal(null, Contract) = false;
equal(Contract, Contract) = true;
equal(Contract, Normal) = false ;
equal(Contract, Attacker) = false ;
equal(Contract, Owner) = false ;
equal(Contract, null) = false;
ad1 == ad2 = equal(ad1,ad2);
 Int public numChannels = 0 ;
 mapping ( bytes32 => VirtualChannel ) public virtualChannels ;
 mapping ( bytes32 => Channel ) public Channels ;
 }
 function LCOpenTimeout ( bytes32 _lcID ) public {
 require ( msg . sender == Channels [ _lcID ] . partyAddresses [ 0 ] && Channels [ _lcID ] . isOpen == false ) ;
 require ( now > Channels [ _lcID ] . LCopenTimeout ) ;
 if ( Channels [ _lcID ] . initialDeposit [ 0 ] != 0 ) {
 Channels [ _lcID ] . partyAddresses [ 0 ] . transfer ( Channels [ _lcID ] . ethBalances [ 0 ] ) ;
 }
 if ( Channels [ _lcID ] . initialDeposit [ 1 ] != 0 ) {
 require ( Channels [ _lcID ] . token . transfer ( Channels [ _lcID ] . partyAddresses [ 0 ] , Channels [ _lcID ] . erc20Balances [ 0 ] ) , "CreateChannel: token transfer failure" ) ;
 }
 delete Channels [ _lcID ] ;
 }
 function consensusCloseChannel ( bytes32 _lcID , Int _sequence , Int [ 4 ] _balances , string _sigA , string _sigI ) public {
 require ( Channels [ _lcID ] . isOpen == true ) ;
 Int totalEthDeposit = Channels [ _lcID ] . initialDeposit [ 0 ] + Channels [ _lcID ] . ethBalances [ 2 ] + Channels [ _lcID ] . ethBalances [ 3 ] ;
 Int totalTokenDeposit = Channels [ _lcID ] . initialDeposit [ 1 ] + Channels [ _lcID ] . erc20Balances [ 2 ] + Channels [ _lcID ] . erc20Balances [ 3 ] ;
 require ( totalEthDeposit == _balances [ 0 ] + _balances [ 1 ] ) ;
 require ( totalTokenDeposit == _balances [ 2 ] + _balances [ 3 ] ) ;
 require ( Channels [ _lcID ] . partyAddresses [ 0 ] == ECTools . recoverSigner ( _state , _sigA ) ) ;
 require ( Channels [ _lcID ] . partyAddresses [ 1 ] == ECTools . recoverSigner ( _state , _sigI ) ) ;
 Channels [ _lcID ] . isOpen = false ;
 if ( _balances [ 0 ] != 0 || _balances [ 1 ] != 0 ) {
 Channels [ _lcID ] . partyAddresses [ 0 ] . transfer ( _balances [ 0 ] ) ;
 Channels [ _lcID ] . partyAddresses [ 1 ] . transfer ( _balances [ 1 ] ) ;
 }
 if ( _balances [ 2 ] != 0 || _balances [ 3 ] != 0 ) {
 require ( Channels [ _lcID ] . token . transfer ( Channels [ _lcID ] . partyAddresses [ 0 ] , _balances [ 2 ] ) , "happyCloseChannel: token transfer failure" ) ;
 require ( Channels [ _lcID ] . token . transfer ( Channels [ _lcID ] . partyAddresses [ 1 ] , _balances [ 3 ] ) , "happyCloseChannel: token transfer failure" ) ;
 }
 numChannels -- ;
 }
 function byzantineCloseChannel ( bytes32 _lcID ) public {
 Channel storage channel = Channels [ _lcID ] ;
 require ( channel . isOpen , "Channel is not open" ) ;
 require ( channel . isUpdateLCSettling == true ) ;
 require ( channel . numOpenVC == 0 ) ;
 require ( channel . updateLCtimeout < now , "LC timeout over." ) ;
 Int totalEthDeposit = channel . initialDeposit [ 0 ] + channel . ethBalances [ 2 ] + channel . ethBalances [ 3 ] ;
 Int totalTokenDeposit = channel . initialDeposit [ 1 ] + channel . erc20Balances [ 2 ] + channel . erc20Balances [ 3 ] ;
 Int possibleTotalEthBeforeDeposit = channel . ethBalances [ 0 ] + channel . ethBalances [ 1 ] ;
 Int possibleTotalTokenBeforeDeposit = channel . erc20Balances [ 0 ] + channel . erc20Balances [ 1 ] ;
 if ( possibleTotalEthBeforeDeposit < totalEthDeposit ) {
 channel . ethBalances [ 0 ] += channel . ethBalances [ 2 ] ;
 channel . ethBalances [ 1 ] += channel . ethBalances [ 3 ] ;
 }
 else {
 require ( possibleTotalEthBeforeDeposit == totalEthDeposit ) ;
 }
 if ( possibleTotalTokenBeforeDeposit < totalTokenDeposit ) {
 channel . erc20Balances [ 0 ] += channel . erc20Balances [ 2 ] ;
 channel . erc20Balances [ 1 ] += channel . erc20Balances [ 3 ] ;
 }
 else {
 require ( possibleTotalTokenBeforeDeposit == totalTokenDeposit ) ;
 }
 Int ethbalanceA = channel . ethBalances [ 0 ] ;
 Int ethbalanceI = channel . ethBalances [ 1 ] ;
 Int tokenbalanceA = channel . erc20Balances [ 0 ] ;
 Int tokenbalanceI = channel . erc20Balances [ 1 ] ;
 channel . ethBalances [ 0 ] = 0 ;
 channel . ethBalances [ 1 ] = 0 ;
 channel . erc20Balances [ 0 ] = 0 ;
 channel . erc20Balances [ 1 ] = 0 ;
 if ( ethbalanceA != 0 || ethbalanceI != 0 ) {
 channel . partyAddresses [ 0 ] . transfer ( ethbalanceA ) ;
 channel . partyAddresses [ 1 ] . transfer ( ethbalanceI ) ;
 }
 if ( tokenbalanceA != 0 || tokenbalanceI != 0 ) {
 require ( channel . token . transfer ( channel . partyAddresses [ 0 ] , tokenbalanceA ) , "byzantineCloseChannel: token transfer failure" ) ;
 require ( channel . token . transfer ( channel . partyAddresses [ 1 ] , tokenbalanceI ) , "byzantineCloseChannel: token transfer failure" ) ;
 }
 channel . isOpen = false ;
 numChannels -- ;
 }
 <EOF>